# eval "`dircolors -b ~/.dir_colors`"

alias shutd='sudo shutdown -h now'
alias reb='sudo reboot'

alias p2server='python2 -m SimpleHTTPServer 8005'

# alias runserver='python manage.py runserver 0.0.0.0:8001'
# alias aenv='source env/bin/activate'
# alias denv='deactivate'

# alias docker-run='docker-compose run --rm django'
# alias docker-man='docker-compose run --rm django python manage.py'
alias docker-cache-clean='docker rm -v $(docker ps -a -q -f status=exited);docker rmi $(docker images -f "dangling=true" -q);docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes'

alias path='echo -e ${PATH//:/\\n}'

alias cd..='cd ..'
# alias ..='cd ..'
alias ls='ls --color=auto -h'

alias gs='git status'
alias gc='git commit'
alias gp='git pull --rebase'
alias gl='git log'
alias glf='git lgfiles'
alias gpush='git push origin $(git rev-parse --abbrev-ref HEAD)'

# alias nr='npm run'
# alias ns='npm run start'
# alias ntw='npm run test:watch'
# alias ntc='npm run test:coverage'

# alias dog='pygmentize -g -O style=colorful,bg=dark'
alias reload!="source ~/.zshrc; echo '~/.zshrc reloaded!'"

function switch-git {
  if [ "$1" = "work" ]; then
    git config --global user.name "$GIT_WORK_NAME"
    git config --global user.email "$GIT_WORK_EMAIL"
    export GIT_SSH_COMMAND="ssh -i $GIT_WORK_KEY"
    export SSH_KEY_PATH=$GIT_WORK_KEY
    echo "git changed to $1"
  fi

  if [ "$1" = "personal" ]; then
    git config --global user.name "$GIT_PERSONAL_NAME"
    git config --global user.email "$GIT_PERSONAL_EMAIL"
    export GIT_SSH_COMMAND="ssh -i $GIT_PERSONAL_KEY"
    export SSH_KEY_PATH=$GIT_PERSONAL_KEY
    echo "git changed to $1"
  fi

  if [ "$1" = "builder" ]; then
    git config --global user.name "$GIT_BUILDER_NAME"
    git config --global user.email "$GIT_BUILDER_EMAIL"
    export GIT_SSH_COMMAND="ssh -i $GIT_BUILDER_KEY"
    export SSH_KEY_PATH=$GIT_BUILDER_KEY
    echo "git changed to $1"
  fi
}

# Move the source files to the target directory and create symlinks back to the original location
# Usage: linkit <source1> [<source2> ...] <target_directory>
function linkit {
  if [ $# -lt 2 ]; then
    echo "Usage: linkit <source1> [<source2> ...] <target_directory>"
    return 1
  fi

  # Last argument is the target directory
  local target_dir="${@: -1}"

  # If target directory does not exist, create it
  [ ! -d "$target_dir" ] && mkdir -p "$target_dir"

  # Convert target_dir to absolute path for better symlinks
  target_dir=$(realpath "$target_dir")

  # Process all arguments except the last one (target directory)
  local args=("$@")
  local sources=("${args[@]:0:$#-1}")  # Get all elements except the last one

  for source in "${sources[@]}"; do
    # Expand path and check existence
    source=$(realpath "$source" 2>/dev/null) || {
      echo "Error: $source does not exist"
      continue
    }

    local basename=$(basename "$source")
    local target_path="$target_dir/$basename"

    # Check if source is already a symlink
    if [ -L "$source" ]; then
      echo "Skipping $source: already a symlink"
      continue
    fi

    # Check if destination exists
    if [ -e "$target_path" ]; then
      if [ -L "$target_path" ]; then
        echo "Skipping $source: target $target_path exists and is a symlink"
        continue
      else
        echo "Warning: $target_path already exists and is not a symlink"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          echo "Skipping $source"
          continue
        fi
        rm -rf "$target_path"
      fi
    fi

    # Move the file/directory to target
    if mv "$source" "$target_path"; then
      # Create symlink back to original location
      if ln -s "$target_path" "$source"; then
        echo "✓ Moved $source to $target_path and created symlink"
      else
        echo "✗ Failed to create symlink for $source"
        # Try to move back on failure
        mv "$target_path" "$source" 2>/dev/null || echo "✗ Failed to restore $source"
      fi
    else
      echo "✗ Failed to move $source to $target_path"
    fi
  done
}

# switch-git $DEFAULT_GIT_ENV > /dev/null;


function mk() {
  mkdir -p "$@" && cd "$@"
}

function unfreeze() {
  DISPLAY=:0 kwin_x11 --replace;
}
